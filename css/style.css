/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* 
- change the box model so that the borders and paddings are no longer
added to the total width and height that we specify for the box
*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

/* 
- set the height of this element to 95% of the viewport heigh 
- background tries always to fit the viewport 
*/
.header {
    height: 95vh;
    background-image: linear-gradient(
            to right,
            rgba(126, 213, 111, 0.801),
            rgba(40, 180, 133, 0.801)
        ),
        url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    position: relative;

    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
}

/* width resized automatically */
.logo {
    height: 35px;
}

.text-box {
    position: absolute;
    top: 40%; /* relative to the parent 40% */
    left: 50%;
    transform: translate(-50%, -50%); /* transalte the origine*/
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    /* determines if the backpart of an element is hidden or visible */
    backface-visibility: hidden;
    margin-bottom: 60px;
}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;

    /* 
    animation-delay: 2s; 
    animation-iteration-count: 3;
    */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;

    animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }

    80% {
        transform: translateX(10px);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }

    80% {
        transform: translateX(-10px);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(50px);
    }

    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

/*
:link is a pseudo-class. A pseudo-class represents a special state of a selector.
Pseudo-classes are used to style elements under special conditions.
In this case we want the button in visited and link state to look the same.
*/
.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    display: inline-block;
    border-radius: 100px;
    transition: all 0.2s; /* transition has always to be set in the initial state */
    position: relative;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 10px rgba(0, 0, 0, 0.2);
}

.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
    background-color: #fff;
    color: #777;
}

/*
::after pseudo-class creates a virtual element. In this case we create an element
which looks exactly like the button we already have. (It is basically treated as its child)
*/
.btn::after {
    content: ""; /* necessary, otherwise the virtual element will not appear */
    display: inline-block; /* same as the parent */
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1; /* set behind the parent element */

    transition: all 0.4s;
}

.btn-white::after {
    background-color: #fff;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn-animated {
    animation: moveInBottom 0.5s ease-out 0.75s;

    /* automatically applies the styles of 0% before the animations starts*/
    animation-fill-mode: backwards;
}
